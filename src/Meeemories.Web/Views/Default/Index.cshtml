<style>
    #list article,
    #list article img,
    #list article video {
        max-width: 100%;
    }
    #list article {
        border: 1px solid black;
    }
</style>
<div class="row" style="padding-top: 60px;">
    <div class="col-md-3">
        <input id="file" type="file" name="file" onchange="upload()">
        <ul id="myupload">

        </ul>
    </div>
    <div id="list" class="col-md-9" ic-get-from="/page" ic-trigger-on="load">
    </div>
</div>
<center>
    <span id="indicator" style="display:none;">Loading...</span>
</center>
<script>
    function upload() {
        const input = document.getElementById("file");
        const reset = function () {
            input.value = '';
        }
        for(let file of Array.from(input.files)) {
            fetch('/medias', {
                method: 'post',
                body: file
            }).then(res => {
                if (res.ok)
                    return res.json()
                else {
                    alert('Could not upload.');
                    reset();
                }
                    
            }).then(data => {
                console.log(data);
                //alert('Uploaded!');
                reset();
                add(data.url, data.deleteToken);
            }).catch(() => {
                reset();
            });
        }
    }

    const app = Stimulus.Application.start();
    app.register('upload', class extends Stimulus.Controller {
        static get targets() {
            return ['status']
        }
        initialize() {
            this.poling();
        }
        poling() {
            fetch(this.url).then(res => {
                if (res.ok)
                    return res.json();
                else
                    setTimeout(() => this.poling(), 3000);
            }).then(data => {
                const prev = this.statusTarget.innerText;
                this.statusTarget.innerText = data.status;
                if (data.status.toLowerCase() === 'complete') {
                    if (prev.toLowerCase() === 'converting') {
                        location.reload();
                    }
                }
                else {
                    setTimeout(() => this.poling(), 3000);
                }
            }).catch(() => {
                setTimeout(() => this.poling(), 3000);
            })
        }
        remove() {
            fetch(this.url + '?token=' + this.deleteToken, { method: 'delete' }).then(res => {
                if (res.ok || res.status === 404) {
                    alert('Removed!');
                    remove(this.url);
                    this.element.remove();
                }
                else 
                    alert('Could not remove.')
            })
        }
        get url() {
            return this.data.get('url');
        }
        get deleteToken() {
            return this.data.get('del-token');
        }
    })

    function render(d) {
        return `<li data-controller="upload" data-upload-url="${d.url}" data-upload-del-token="${d.deleteToken}"><p>${d.url}</p><span data-target="upload.status">Uploaded</span><button data-action="upload#remove">Delete</button></li>`
    }
    function add(url, deleteToken) {
        const d = { url, deleteToken };
        pushList(d);
        $('#myupload').append(render(d));
    }
    function remove(url) {
        const list = getList();
        setList(list.filter(d => d.url !== url));
    }
    function getList() {
        const json = localStorage.getItem('myupload') || '[]';
        const list = JSON.parse(json);
        return list;
    }
    function setList(list) {
        localStorage.setItem('myupload', JSON.stringify(list));
    }
    function pushList(data) {
        const list = getList();
        list.push(data);
        setList(list);
    }
    window.onload = function load() {
        const list = getList();
        list.forEach(d => {
            $('#myupload').append(render(d));
        })
    }
</script>
